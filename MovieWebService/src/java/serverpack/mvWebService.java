/*
 * เป็นไฟล์ภาษา java สำหรับเขียน control เพื่อเรียกข้อมูลจากเอกสาร xml
 * โดยใช้ไลบารี่ avax.xml.parsers ต่างๆ
 * บันทึกเอกสาร document เป็นไฟล์ xml โดยเรียกใช้ไลบารี่ javax.xml.transform
 * ในฟังก์ชันต่างๆ เมื่อเรียกใช้ไลบารี่เกี่ยวกับ document ให้ใช้ throws Exception ด้วย
 * เว็บเซอร์วิสชี้ชื่อ @WebService(serviceName = "mvWebService")
 * เมทอดต่างๆในเว็บเซอร์วิส ที่มีใช้บริการมีดังนี้
 *  **@WebMethod(operationName = "DeleteMovie")
        - สำหรับ "ลบ" รายชื่อภาพยนตร์ หน้าเว็บที่เกี่ยวข้อง Delete.jsp
 *  **@WebMethod(operationName = "addMovie")
        - สำหรับ "เพิ่ม" รายการภาพยนตร์ หน้าเว็บที่เกี่ยวข้อง Add.jsp
 *  **@WebMethod(operationName = "searchQue1")
        - สำหรับ "เรียกดู" รายการภาพยนตร์ หน้าเว็บที่เกี่ยวข้อง Search.jsp
        - มีการเรียกใช้หน้า fragment normalSearch.jsp และ QuerySearch.jsp 
 *  **@WebMethod(operationName = "Edit")
        - สำหรับ "แก้ไข" รายการภาพยนตร์ หน้าเว็บที่เกี่ยวข้อง Edit.jsp
 *  **@WebMethod(operationName = "Save")
        - หน้าเว็บแสดงรายการที่แก้ไข "หลังจากกดปุ่ม save" หน้าแก้ไข หน้าเว็บที่เกี่ยวข้อง Edit_.jsp
 *  **@WebMethod(operationName = "searchQue2")
        - สำหรับ "เรียกดู" รายการภาพยนตร์ หน้าเว็บที่เกี่ยวข้อง SearchQ.jsp
        - มีการเรียกใช้หน้า fragment QuerySearch.jsp ที่เกี่ยวข้องโดยใช้คำสั่ง 
        - <jsp:include page="/Fragments/QuerySearch.jsp> </jsp:include>
 */

/***** ประกาศไลบารี่ต่างๆที่จำเป็นต้องใช้ *******/
package serverpack;

import javax.jws.WebService;
import javax.jws.WebMethod;
import javax.jws.WebParam;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.io.FileOutputStream;
import java.io.InputStream;


import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

//transformer
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.dom.DOMSource; 
import javax.xml.transform.stream.StreamResult;


/***** ประกาศเว็บเซอร์วิส *******/
@WebService(serviceName = "mvWebService")
public class mvWebService {

    /**** ฟังก์ชัน callXML ไม่ใช้ในที่นี้ ข้ามๆ  ****/
    public static NodeList callXML(int func) throws SAXException, IOException, ParserConfigurationException {  
        // call path xml file to parse document
        URL url = mvWebService.class.getResource("/serverpack/movies.xml");
        String xmlFile = url.getPath();
        // File xmlFile = new File("/home/nuyuyii/NetBeansProjects/Pro_ST/MovieWebService/web/movies.xml");  
        // InputStream xmlFile = mvWebService.class.getResourceAsStream("/serverpack/movies.xml");
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(xmlFile);
            
            if (func==1){
                NodeList nList = doc.getElementsByTagName("film");
                return nList;
            } 
            

        } catch (SAXException se) {
            // Error generated by this application
            // (or a parser-initialization error)
            se.printStackTrace();
        } catch (ParserConfigurationException pce) {
            // Parser with specified options 
            // cannot be built
            pce.printStackTrace();
        } catch (IOException ie) {
            // I/O error
            ie.printStackTrace();
        }    
        return null;
    }

    /**** เมทอดชื่อ serchbyID ไม่ใช้ในที่นี้ ข้ามๆ  ****/
    @WebMethod(operationName = "serchbyID")
    public String serchbyID(@WebParam(name = "nodeID") final int nodeID) throws Exception  {
        String result = "";
        NodeList nList = callXML(1);
        
        Element nfilm = (Element) nList.item(nodeID-1);
          NodeList childfilm = nfilm.getChildNodes();
          for (int j= 0; j < childfilm.getLength(); j++){
            Node temp = childfilm.item(j);
            NodeList childtemp = temp.getChildNodes();
            if(childtemp.getLength() > 1){
                for (int i = 0; i<childtemp.getLength();i++){
                    Node child = childtemp.item(i);
                    NodeList childnode = child.getChildNodes();
                    if (i==1){
                        result = String.format("%s%s: %s\n", result , temp.getNodeName(), child.getTextContent());
                    }else if (childnode.getLength()>0){
                        result = String.format("%s       %s\n", result, child.getTextContent());
                    }
                }
                
            //We got more childs; Let's visit them as well
            }else if(childtemp.getLength() > 0){
                result = String.format("%s%s: %s\n", result, temp.getNodeName(), temp.getTextContent());
            }
          }
        return result;
    }

    /**** เมทอดชื่อ DeleteMovie
    * เมื่อมีการเรียกใช้เมทอดนี้จะกระทำฟังก์ชัน DeleteMovie เป็นฟังก์ชันที่ส่งค่ากลับเป็น String 
    * โดยฟังก์ชันนี้รับค่าพารามิเตอร์จากเว็บชื่อ nodeID 
    * ประกาศเป็น integer ชื่อที่เรียกใช้ในฟังก์ชันเป็น nodeID
    ****/

    @WebMethod(operationName = "DeleteMovie")
    public String DeleteMovie(@WebParam(name = "nodeID") final int nodeID) throws Exception  {
        /** เพราะเป็นฟังก์ชันที่ส่งค่ากลับเป็น String จึงเริ่มที่ประกาศตัวแปรที่จะส่งค่ากลับ **/
        String result="";
        try {
            // call path xml file to parse document
            URL url = mvWebService.class.getResource("/serverpack/movies.xml");
            String xmlFile = url.getPath();
            // File xmlFile = new File("movies.xml");
            // InputStream xmlFile = mvWebService.class.getResourceAsStream("/serverpack/movies.xml");
            /** เรียกใช้ฟังก์ชันจากไลบารี่ เพื่อทำการเรียกเอกสาร xml ด้วย parse ภาษา java **/
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(xmlFile);

            /** ให้ nList เก็บค่าตัวแปรชนิด NodeList (รายการ Node หลายๆโหนดเก็บเรียงเริ่มจาก 0 
            ** โดยรับค่าจาก Elements ชื่อ "film" ในเอกสาร doc ซึ่งก็คือไฟเอกสาร xml ที่ถูก parser มา **/
            NodeList nList = doc.getElementsByTagName("film"); 
            
            /** เก็บค่า String ในตัวแปรที่ชื่อ result **/
            result = "XML file delete successfully";
            Element nfilm = (Element) nList.item(nodeID-1);
            nfilm.getParentNode().removeChild(nfilm);
            /** เรียกใช้ฟังก์ชัน SaveXML() เพื่อทำการบันทึกการเปลี่ยนแปลงลงในไฟล์เอกสาร xml 
            ** ใส่ค่าพารามิเตอร์เป็น doc เพื่อให้บันทึกไฟล์เอกสาร doc **/
            SaveXML(doc);    
            /** ส่งค่ากลับของฟังก์ชันเมื่อเข้าเงื่อนไข Try **/
            return result;
        } catch (Exception e) {
            /** เก็บค่า String ที่แสดงผล Error ในตัวแปรที่ชื่อ result **/
            result = "Error Delete Movie! Selete NodeID again Pls.";
            e.printStackTrace();

        }
        /** ส่งค่ากลับของฟังก์ชันเมื่อไม่เข้าเงื่อนไข Try **/
        return result;
    }
    
    public static void SaveXML(Document doc)throws Exception  {
        URL url = mvWebService.class.getResource("/serverpack/movies.xml"); //UpdatemoviesSr.xml");
        String path = url.getPath();
        //String path = "/home/nuyuyii/NetBeansProjects/Pro_ST/MovieWebService/src/java/serverpack/movies.xml";
        //Use a Transformer for output
        TransformerFactory tFactory = TransformerFactory.newInstance();
        Transformer transformer = tFactory.newTransformer();
        DOMSource source = new DOMSource(doc);
        StreamResult result = new StreamResult(new FileOutputStream(path));
        //StreamResult result = new StreamResult(new File(filepath));//System.out);
        transformer.transform(source, result);
    }

    /**** เมทอดชื่อ addMovie
    * เมื่อมีการเรียกใช้เมทอดนี้จะกระทำฟังก์ชัน addMovie เป็นฟังก์ชันที่ส่งค่ากลับเป็น String 
    * โดยฟังก์ชันนี้รับค่าพารามิเตอร์จากเว็บชื่อ
    *  ** title ประกาศเป็น String ชื่อที่เรียกใช้ในฟังก์ชันเป็น title
    *  ** year ประกาศเป็น String ชื่อที่เรียกใช้ในฟังก์ชันเป็น year
    *  ** types ประกาศเป็น String ชื่อที่เรียกใช้ในฟังก์ชันเป็น types
    *  ** time ประกาศเป็น Integer ชื่อที่เรียกใช้ในฟังก์ชันเป็น time
    *  ** director ประกาศเป็น String ชื่อที่เรียกใช้ในฟังก์ชันเป็น director
    *  **เพิ่มจากการทดสอบ
    *  ** actor ประกาศเป็น String ชื่อที่เรียกใช้ในฟังก์ชันเป็น actor
    ****/
    @WebMethod(operationName = "addMovie")
    public String addMovie(@WebParam(name = "title") final String title, @WebParam(name = "year") final String year,@WebParam(name = "types") final String types,
            @WebParam(name = "time") int time, @WebParam(name = "director") final String director, @WebParam(name = "actor") final String actor) throws Exception{
        String result="";
        try {
            // call path xml file to parse document
            // File xmlFile = new File("/home/nuyuyii/NetBeansProjects/Pro_ST/MovieWebService/src/java/serverpack/movies.xml");
            // InputStream xmlFile = mvWebService.class.getResourceAsStream("/serverpack/movies.xml");
            URL url = mvWebService.class.getResource("/serverpack/movies.xml");
            String xmlFile = url.getPath();
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(xmlFile);

            /** ให้ตัวแปร Element ชื่อ movie รับค่า Element จากไฟล์เอกสาร doc
            ** ในที่นี้คือรับ Element ที่เป็น root element ของเอกสาร  **/
            Element movie = (Element) doc.getDocumentElement();
            String mins = time+" min";

            /** ประกาษตัวแปร Element ชื่อ newfilm ให้สร้าง Element ชื่อ film ในเอกสาร doc **/
            Element newfilm = doc.createElement("film");

            // Tranform Time: interger to String
            String min = time + " min";
            /** add Element to film 
            ** โดยเรียกใช้ฟังก์ชัน getMovieElement(doc, name_element, value)
            ** จากนั้นใช้ฟังก์ชัน appendChild() เพื่อเพิ่ม node element ย่อยนั้น ลงใน element <film> (newfilm)
            ** กรณี types ประกาศสร้าง element ไว้ก่อน เพราะใน types จะมี child element 
            **  * ที่ชื่อ type เก็บค่าแท็กประเภทต่างๆของภาพยนตร์อีกที
            **/
            newfilm.appendChild(getMovieElement(doc, "title", title));
            newfilm.appendChild(getMovieElement(doc, "year", year));
            newfilm.appendChild(getMovieElement(doc, "types", ""));
            newfilm.appendChild(getMovieElement(doc, "time", min));
            newfilm.appendChild(getMovieElement(doc, "director",director));
            newfilm.appendChild(getMovieElement(doc, "actor",actor));

            /** ประกาษตัวแปร Element ชื่อ addtype ให้รับค่า Element ชื่อ types ที่ตำแหน่งแรก
            ** ใน element <film> (newfilm) **/
            Element addtype = (Element) newfilm.getElementsByTagName("types").item(0);
            /** add element types movie 
            ** ใช้ for loop วนตัดค่าที่สตริงที่รับมาที่ตัวอักษร "," 
            ** ประกาศตัวแปร name เก็บชื่อของ element ที่จะสร้างในที่นี้คือ type 
            ** โดยเรียกใช้ฟังก์ชัน getMovieElement(doc, name_element, value)
            ** จากนั้นใช้ฟังก์ชัน appendChild() เพื่อเพิ่ม node element 
            ** ย่อยนั้น ลงใน element <types> (addtype)**/
            for (String type: types.split(",")){
                String name = "type";
                addtype.appendChild(getMovieElement(doc, name, type));
            }

            /** เรียก element film ในเอกสาร doc เพื่อดูว่ามีภาพยนตร์ทั้งหมดกี่เรื่องแล้ว
            ** โดยเรื่องที่เพิ่มเข้าไปจะเป็นเรื่องที่ตำแหน่งล่าสุด 
            ** ดังนั้นจะต้องส่งกลับเป็น จำนวนภาพยนตร์ทั้งหมด +1 **/
            NodeList nList = doc.getElementsByTagName("film");  
            /** ส่งค่ากลับในรูปแบบของ format String โดย %s แทนสตริงของค่าตัวแปรหลัง , **/           
            result = String.format("--%s--%s--%s--%s--%s--%s--%s", title,year,types,mins,director,actor,nList.getLength()+1);

            /** ใช้ฟังก์ชัน appendChild() เพื่อเพิ่ม element <film> (newfilm) ลงใน root element (movie) **/
            movie.appendChild(newfilm);
            SaveXML(doc);    
            return result;
        } catch (Exception e) {
            result = "Error Add Movie! Try again Pls.";
            e.printStackTrace();

        }
        return result;
    }
    /**** สร้างฟังก์ชันส่งค่ากลับเป็น Node สำหรับสร้าง element ชื่อ getMovieElement
    * โดยฟังก์ชันนี้รับค่าพารามิเตอร์จากเว็บชื่อ
    *  ** ประกาศตัวแปรชนิด Document ชื่อ doc
    *  ** ประกาศตัวแปรชนิด String ชื่อ name
    *  ** ประกาศตัวแปรชนิด String ชื่อ value
    ****/
    private static Node getMovieElement(Document doc, String name, String value){
	/** ประกาศ Element ชื่อ node ให้สร้าง Element เป็นชื่อที่รับมาจากตัวแปร name ในเอกสาร doc**/
        Element node = doc.createElement(name);
	/** ใช้ฟังก์ชัน appendChild() เพื่อเพิ่มค่าของ element ลงใน  element <(name)> 
        ** การเพิ่มค่าของ element ฟังก์ชัน createTextNode(value)
        ** คือการใส่ค่าตัวแปร value ลงในโหนดของเอกสาร doc 
        ** จากนั้นส่งค่าโหนดกลับ **/
        node.appendChild(doc.createTextNode(value));
        System.out.println("Insert OK "+node.getTextContent());
        return node;
    }
    
    /**** เมทอดชื่อ searchQue1
    * เมื่อมีการเรียกใช้เมทอดนี้จะกระทำฟังก์ชัน searchQue1 เป็นฟังก์ชันที่ส่งค่ากลับเป็น String 
    * โดยฟังก์ชันนี้รับค่าพารามิเตอร์จากเว็บชื่อ
    *  ** category ประกาศเป็น String ชื่อที่เรียกใช้ในฟังก์ชันเป็น category
    *  ** search ประกาศเป็น String ชื่อที่เรียกใช้ในฟังก์ชันเป็น search
    ****/
    @WebMethod(operationName = "searchQue1")
    public String searchQue1(@WebParam(name = "category") String category,@WebParam(name = "search") String search) throws Exception {
        String re="Selete Search Pls.";
        try {
            //File inputFile = new File("movies.xml");
            //InputStream xmlFile = mvWebService.class.getResourceAsStream("/serverpack/movies.xml");
            URL url = mvWebService.class.getResource("/serverpack/movies.xml");
            String xmlFile = url.getPath();
            
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(xmlFile);
            doc.getDocumentElement().normalize();
            NodeList nList = doc.getElementsByTagName("film"); 
            /** วนลูปส่งค่ารายการภาพยนตร์ที่ตรงตามเงื่อนไขโดยจะส่งค่ากลับเป็นตาราง
            ** มีรายละเอียดของภาพยนตร์**/
            for (int temp = 0; temp < nList.getLength(); temp++) {
                Node nNode = nList.item(temp);
                Element eElement = (Element) nNode;
                Element nfilm =  (Element) nList.item(temp);
                NodeList childfilm = nfilm.getChildNodes();
           /** เงื่อนไขที่จะเก็บค่ารายการภาพยนตร์เพื่อจะส่งค่ากลับ
           ** * ในที่นี้คือ กรณีรับค่าตัวแปร search เป็น all
           ** * หรือ กรณีที่ชื่อ element (category) ของ film มีค่าตรงกับ ตัวแปร search 
           ** category ต่างๆใน film เช่น title, year **/
                if (search.equals("all")||eElement.getElementsByTagName(category).item(0).getTextContent().toLowerCase().contains(search.toLowerCase())) {
                    re = re + "<table><tr><td> NODEID:</td><td> ::" + (temp+1)+"::";
                    for (int j= 0; j < childfilm.getLength(); j++){
                        Node cnode = childfilm.item(j);
                        NodeList childtemp = cnode.getChildNodes();
                        int p=0;
                        if(childtemp.getLength() > 1){
                            for (int i = 0; i<childtemp.getLength();i++){
                                Node child = childtemp.item(i);
                                NodeList childnode = child.getChildNodes();
                                if (p==0&&childnode.getLength()>0){
                                    re = String.format("%s</td></tr><tr><td> %s:</td><td> %s ", re, cnode.getNodeName().toUpperCase(), child.getTextContent());
                                    p=1;
                                }else if (childnode.getLength()>0){
                                    re = String.format("%s,%s", re, child.getTextContent());
                                }
                            }

                            //We got more childs; Let's visit them as well
                        }else if(childtemp.getLength() > 0){
                            re = String.format("%s</td></tr><tr><td> %s:</td><td> %s ", re, cnode.getNodeName().toUpperCase(), cnode.getTextContent());
                        } 

                    }
                        re = re+"</td></tr></table>---";

                }
            }

            return re;
            
        } catch (Exception e) {   
            re = "Selete Search Pls.";//Error Search Movie"
            e.printStackTrace();

        }
        return re;        
    }
    
    /**** เมทอดชื่อ searchQue1
    * เมื่อมีการเรียกใช้เมทอดนี้จะกระทำฟังก์ชัน searchQue1 เป็นฟังก์ชันที่ส่งค่ากลับเป็น String 
    * โดยฟังก์ชันนี้รับค่าพารามิเตอร์จากเว็บชื่อ
    *  ** nodeID ประกาศเป็น Integer ชื่อที่เรียกใช้ในฟังก์ชันเป็น nodeID
    ****/
    @WebMethod(operationName = "Edit")
    public String EditMovie(@WebParam(name = "nodeID") final int nodeID) throws Exception  {
        String result="Selete NodeID Pls.";
        try {
            // call path xml file to parse document
            URL url = mvWebService.class.getResource("/serverpack/movies.xml");
            String xmlFile = url.getPath();
            //InputStream xmlFile = mvWebService.class.getResourceAsStream("/serverpack/movies.xml");
            //File xmlFile = new File("/home/nuyuyii/NetBeansProjects/Pro_ST/MovieWebService/src/java/serverpack/movies.xml");
            result="";
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(xmlFile);
            doc.getDocumentElement().normalize();
            NodeList nList = doc.getElementsByTagName("film");         

            /** ประกาศตัวแปร Element รับค่า Element ที่ตำแหน่ง item NodeID-1 เพราะค่า List เริ่มที่ 0 */
            Element nfilm =  (Element) nList.item(nodeID-1);

            /** วนลูปตามจำนวน ChildNodes ที่มี เพื่อส่งกลับค่ารารละเอียดต่างๆของภาพยนตร์เรื่องนั้น  
            ** โดยแบ่ง element ในรายการภาพยนตร์ด้วย "--" **/
            NodeList childfilm = nfilm.getChildNodes();
            for (int j= 0; j < childfilm.getLength(); j++){
                
                Node temp = childfilm.item(j);
                NodeList childtemp = temp.getChildNodes();
                int p = 0;
            /** เงื่อนไขที่ใช้สำหรับเซ็ค ChildNodes ย่อยในที่นี้คือ <Types> 
            ** ให้ส่งกลับรายการประเภทหนังของหนังเรื่องนี้ทั้งหมด โดยขั้นรายการประเภทด้วย ","  
            **/
                if(childtemp.getLength() > 1){
                    for (int i = 0; i<childtemp.getLength();i++){
                        Node child = childtemp.item(i);
                        NodeList childnode = child.getChildNodes();
                        //result =result+":"+i+child.getFirstChild();
                        if (p==0 && childnode.getLength()>0){
                            result = String.format("%s--%s", result, child.getTextContent());
                            p=1;
                        }else if (childnode.getLength()>0){
                            result = String.format("%s,%s", result, child.getTextContent());
                        }
                        
                    }
                    

                //We got more childs; Let's visit them as well
            }else if(childtemp.getLength() > 0){
                result = String.format("%s--%s", result, temp.getTextContent());
            }
          }
            return result;
        } catch (Exception e) {
            result = "Error Edit Movie";
            e.printStackTrace();

        }
        return result;
    }
    
    /**** เมทอดชื่อ Save
    * เมื่อมีการเรียกใช้เมทอดนี้จะกระทำฟังก์ชัน SaveMovie เป็นฟังก์ชันที่ส่งค่ากลับเป็น String 
    * โดยฟังก์ชันนี้รับค่าพารามิเตอร์จากเว็บชื่อ
    *  ** nodeID ประกาศเป็น Integer ชื่อที่เรียกใช้ในฟังก์ชันเป็น nodeID
    *  ** title ประกาศเป็น String ชื่อที่เรียกใช้ในฟังก์ชันเป็น title
    *  ** year ประกาศเป็น String ชื่อที่เรียกใช้ในฟังก์ชันเป็น year
    *  ** types ประกาศเป็น String ชื่อที่เรียกใช้ในฟังก์ชันเป็น types
    *  ** time ประกาศเป็น Integer ชื่อที่เรียกใช้ในฟังก์ชันเป็น time
    *  ** director ประกาศเป็น String ชื่อที่เรียกใช้ในฟังก์ชันเป็น director
    ****/
    @WebMethod(operationName = "Save")
    public String SaveMovie(@WebParam(name = "nodeID") int nodeID, @WebParam(name = "title") final String _title,
            @WebParam(name = "year") final String _year, @WebParam(name = "types") final String _types, @WebParam(name = "time") final String _time, @WebParam(name = "director") final String _director) throws Exception {
        //NodeList nList = callXML();
        //String del = ""+DeleteMovie(nodeID);
        //String result = ""+addMovie(_title,_year,_types,_time,_director);
        String result="";
        try {
            // call path xml file to parse document
            URL url = mvWebService.class.getResource("/serverpack/movies.xml");
            String xmlFile = url.getPath();
            //File xmlFile = new File("/home/nuyuyii/NetBeansProjects/Pro_ST/MovieWebService/src/java/serverpack/movies.xml");
            //InputStream xmlFile = mvWebService.class.getResourceAsStream("/serverpack/movies.xml");
            
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(xmlFile);
            Element movie = (Element) doc.getDocumentElement();
            doc.getDocumentElement().normalize();
            NodeList nList = doc.getElementsByTagName("film");         

            String re = "";
            /**เริ่มแก้ไขที่ตำแหน่งภาพยนตร์นั้นนับจากรายการ element list film 
            ** อัพเดทค่าโดยใช้ฟังก์ชัน setNodeValue(value) 
            ** โดยในที่นี้เราต้องสร้างตัวแปรโหนด เพื่อมารับค่าเดิมของ element ที่ตำแหน่งภาพยนตร์นั้นก่อน
            **/
            Element nfilm =  (Element) nList.item(nodeID-1);
            Node title = nfilm.getElementsByTagName("title").item(0).getFirstChild();
            title.setNodeValue(_title);
            Node year = nfilm.getElementsByTagName("year").item(0).getFirstChild();
            year.setNodeValue(_year);    
            Node time = nfilm.getElementsByTagName("time").item(0).getFirstChild();
            time.setNodeValue(_time);  
            Node dir = nfilm.getElementsByTagName("director").item(0).getFirstChild();
            dir.setNodeValue(_director);  
            Node alltype = nfilm.getElementsByTagName("types").item(0);
            NodeList atype = alltype.getChildNodes();
            result = "length:"+atype.getLength()+" "+ alltype.getTextContent();
            
            int typ = atype.getLength();
          
            for (int i= 0; i < typ; i++){ 
                Node child = (Node) atype.item(0);

                alltype.removeChild(child);

            
               /*if (child.getNodeName() == "type" ){
                    result = result+" Del:"+i +" == " + child.getTextContent();
                    alltype.removeChild(child);
                }*/
               
            }
            for (String type: _types.split(",")){
                String name = "type";//+index;
                alltype.appendChild(getMovieElement(doc, name, type));
                result = result+"   ----"+type;

            }
            //print check: result = result+" res Now!!" + alltype.getTextContent();
            result = String.format("--%s--%s--%s--%s--%s", _title,_year,_types,_time,_director);
            SaveXML(doc);
            return result;
        } catch (Exception e) {
            result = "Error Save Movie";
            e.printStackTrace();

        }
        return result;
    }

    /**** เมทอดชื่อ searchQue2
    * เมื่อมีการเรียกใช้เมทอดนี้จะกระทำฟังก์ชัน searchQue2 เป็นฟังก์ชันที่ส่งค่ากลับเป็น String 
    * โดยฟังก์ชันนี้รับค่าพารามิเตอร์จากเว็บชื่อ
    *  ** category ประกาศเป็น String ชื่อที่เรียกใช้ในฟังก์ชันเป็น category
    *  ** conditon ประกาศเป็น String ชื่อที่เรียกใช้ในฟังก์ชันเป็น conditon
    *  ** firstNum ประกาศเป็น Integer ชื่อที่เรียกใช้ในฟังก์ชันเป็น firstNum
    *  ** secondNum ประกาศเป็น Integer ชื่อที่เรียกใช้ในฟังก์ชันเป็น secondNum
    * คล้ายๆ searchQue1 แต่เพิ่มเงื่อนไขด้านจำนวนเลข พวกเวลา มากกว่า น้อยกว่า มาเปรียบเทียบ 
    * ** ถ้าใช่จึงทำการเก็บค่ารายการภาพยนตร์ที่ตรงเงื่อนไขเป็นสตริง แล้วส่งคืน
    ****/
    @WebMethod(operationName = "searchQue2")
    public String searchQue2(@WebParam(name = "category") String category,@WebParam(name = "conditon") String conditon, @WebParam(name = "firstNum") int firstNum, @WebParam(name = "secondNum") int secondNum) throws Exception{
        String result="Error Search Condition";
        try{
            URL url=mvWebService.class.getResource("/serverpack/movies.xml");
            String xmlFile = url.getPath();
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(xmlFile);
            Element movie = (Element) doc.getDocumentElement();
            doc.getDocumentElement().normalize();
            NodeList nList = doc.getElementsByTagName("film"); 
            for (int temp = 0; temp < nList.getLength(); temp++) {
                Node nNode = nList.item(temp);
                Element eElement = (Element) nNode;
                Element nfilm =  (Element) nList.item(temp);
                NodeList childfilm = nfilm.getChildNodes();

                int prt = 0;
                int Intval = 0;
                String Strval = eElement.getElementsByTagName(category).item(0).getTextContent();
                /********check patseInt for category year or time *******/
                if(category.equals("time")){
                    String[] Tim = Strval.split(" min",2);
                    Intval = Integer.valueOf(Tim[0]);
                    System.out.println(temp+": "+Intval);


                }else{
                    Intval = Integer.parseInt(Strval);
                }
                /********check condition*******/
                if (conditon.equals("more")){
                   if(Intval > firstNum ){
                        System.out.println(Intval);
                        prt = 1;
                   }
                }else if(conditon.equals("little")){
                   if(Intval < firstNum ){
                        System.out.println(Intval);
                        prt = 1;
                   } 
                }else if(conditon.equals("between")){
                   if(firstNum < Intval && Intval < secondNum){
                        System.out.println(Intval);
                        prt = 1;
                   } 
                }else if(conditon.equals("non-between")){
                   if(firstNum > Intval || Intval > secondNum){
                        System.out.println(Intval);
                        prt = 1;
                   } 
                }
                /********ถ้าตรงเงื่อนไข เก็บรายละเอียดของภาพยนตร์ที่ตำแหน่งนั้น เพื่อส่งค่ากลับ *******/
                if (prt == 1){
                    result = result + "<table><tr><td> NODEID:</td><td> ::" + (temp+1)+"::\n";
                    for (int j= 0; j < childfilm.getLength(); j++){
                    Node cnode = childfilm.item(j);
                            NodeList childtemp = cnode.getChildNodes();
                            int p=0;
                            if(childtemp.getLength() > 1){
                                for (int i = 0; i<childtemp.getLength();i++){
                                    Node child = childtemp.item(i);
                                    NodeList childnode = child.getChildNodes();
                                    if (p==0&&childnode.getLength()>0){
                                        result = String.format("%s</td></tr><tr><td> %s:</td><td> %s ", result, cnode.getNodeName().toUpperCase(), child.getTextContent());
                                        p=1;
                                    }else if (childnode.getLength()>0){
                                        result = String.format("%s,%s", result, child.getTextContent());
                                    }
                                }

                                //We got more childs; Let's visit them as well
                            }else if(childtemp.getLength() > 0){
                                result = String.format("%s</td></tr><tr><td> %s:</td><td> %s ", result, cnode.getNodeName().toUpperCase(), cnode.getTextContent());
                            } 

                        }
                    result = result+"</td></tr></table>---";            
                }     

            }           
        }catch(Exception e){
            result = "Error Search Condition";
            e.printStackTrace();
        }
        return result;
    }
   
}
